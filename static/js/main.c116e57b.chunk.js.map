{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["targetOrigin","query","queryString","parse","window","location","search","targetWindow","parent","opener","filter","w","self","onAuthorized","Promise","resolve","reject","iss","FHIR","oauth2","authorize","client_id","scope","state","ready","then","client","tokenResponse","smart_messaging_origin","submitOrder","postMessage","messageId","uuid","v4","messageType","payload","resource","fixtureProposal","App","useState","authorized","setAuthorized","useEffect","a","className","onClick","JSON","stringify","Boolean","hostname","match","rootEl","document","getElementById","ReactDOM","render","navigator","serviceWorker","registration","unregister"],"mappings":"4hCAWIA,E,2GAFEC,E,OAAQC,EAAYC,MAAMC,OAAOC,SAASC,QAC1CC,EAAe,CAACH,OAAOI,OAAQJ,OAAOK,QAAQC,OAAO,SAAAC,GAAC,OAAIA,IAAMP,OAAOQ,OAAM,GAG7EC,EAAe,IAAIC,QAAQ,SAACC,EAASC,GACrCf,EAAMgB,IACRC,IAAKC,OAAOC,UAAU,CACpBC,UAAW,aACXC,MAAO,mBAEArB,EAAMsB,OACfL,IAAKC,OAAOK,QAAQC,KAAK,SAAAC,GACvB1B,EAAe0B,EAAOH,MAAMI,cAAcC,uBAC1Cb,GAAQ,OAMRc,EAAc,WAClBtB,EAAauB,YACX,CACEC,UAAWC,IAAKC,KAChBC,YAAa,oBACbC,QAAS,CACPC,SAAUC,IAGdrC,GAGFO,EAAauB,YACX,CACEC,UAAWC,IAAKC,KAChBC,YAAa,WAEflC,IA2BWsC,MAvBf,WAAgB,IAAD,EACqBC,oBAAS,GAD9B,mBACRC,EADQ,KACIC,EADJ,KAOb,OAJAC,oBAAU,WACR7B,EAAaY,KAAK,SAAAkB,GAAC,OAAIF,GAAc,OAIrC,yBAAKG,UAAU,OAAf,kFAGIrC,GAAgBP,GAAgBwC,GAChC,oCACE,6BACE,4BAAQK,QAAShB,GAAjB,iBAEF,6BAAMiB,KAAKC,UAAUV,EAAiB,KAAM,MAE1C,8BCvDQW,QACW,cAA7B5C,OAAOC,SAAS4C,UAEe,UAA7B7C,OAAOC,SAAS4C,UAEhB7C,OAAOC,SAAS4C,SAASC,MACvB,2DCZN,IAAMC,EAASC,SAASC,eAAe,QAEvCC,IAASC,OAAO,kBAAC,EAAD,MAASJ,GDyHnB,kBAAmBK,WACrBA,UAAUC,cAAcjC,MAAMC,KAAK,SAAAiC,GACjCA,EAAaC,iB","file":"static/js/main.c116e57b.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport uuid from \"uuid\";\n\nimport FHIR from \"fhirclient\";\n\nimport \"./App.css\";\nimport fixtureProposal from \"./fixture-proposal.json\";\nimport queryString from \"query-string\";\n\nconst query = queryString.parse(window.location.search);\nconst targetWindow = [window.parent, window.opener].filter(w => w !== window.self)[0]\nlet targetOrigin;\n\nconst onAuthorized = new Promise((resolve, reject) => {\n  if (query.iss) {\n    FHIR.oauth2.authorize({\n      client_id: \"my_web_app\",\n      scope: \"patient/*.read\"\n    });\n  } else if (query.state) {\n    FHIR.oauth2.ready().then(client => {\n      targetOrigin = client.state.tokenResponse.smart_messaging_origin;\n      resolve(true);\n    });\n  }\n});\n\n\nconst submitOrder = () => {\n  targetWindow.postMessage(\n    {\n      messageId: uuid.v4(),\n      messageType: \"scratchpad.update\",\n      payload: {\n        resource: fixtureProposal\n      }\n    },\n    targetOrigin\n  );\n\n  targetWindow.postMessage(\n    {\n      messageId: uuid.v4(),\n      messageType: \"ui.done\"\n    },\n    targetOrigin\n  );\n};\n\nfunction App() {\n  let [authorized, setAuthorized] = useState(false);\n\n  useEffect(() => {\n    onAuthorized.then(a => setAuthorized(true));\n  });\n\n  return (\n    <div className=\"App\">\n      Looks like you're trying to place a PAMA order. Let me recommend my\n      favorite...\n      {(targetWindow && targetOrigin && authorized && (\n        <>\n          <div>\n            <button onClick={submitOrder}>Update order</button>\n          </div>\n          <pre>{JSON.stringify(fixtureProposal, null, 2)}</pre>\n        </>\n      )) || \" (once things are ready).\"}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootEl = document.getElementById('root')\n\nReactDOM.render(<App />, rootEl);\n\nif (module.hot) {\n  module.hot.accept('./App', () => {\n    const NextApp = require('./App').default\n    ReactDOM.render(\n      <NextApp />,\n      rootEl\n    )\n  })\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}